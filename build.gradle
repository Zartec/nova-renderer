buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.patcher'

// Set Nova's settings
version = '0.3'
group= "com.continuum.nova"

ext.resourcesDir = 'src/main/resources'
ext.resourcesDir = project.hasProperty('resourcesDir') ? project.getProperty('resourcesDir') : ext.resourcesDir
project.buildDir = project.hasProperty('buildDir') ? project.getProperty('buildDir') : project.buildDir

minecraft.version = "1.10"

minecraft {
    mappings = 'snapshot_nodoc_20160518'
    workspaceDir = "projects"
    versionJson = "src/main/jsons/${minecraft.version}-dev.json"
    buildInstaller = true
    installerVersion = "1.4"

    def common = {
        patchPrefixOriginal "../src-base/minecraft"
        patchPrefixChanged "../src-work/minecraft"
        mainClassClient "net.minecraft.launchwrapper.Launch"
        tweakClassClient "com.continuum.nova.launcher.NovaTweaker"
        mainClassServer "net.minecraft.launchwrapper.Launch"
        tweakClassServer "com.continuum.nova.launcher.NovaServerTweaker"
    }

    projects {
        nova {
            rootDir "."
            resourcesDir = project.ext.resourcesDir
            patchDir "src/main/patches/minecraft"
            patchAfter "clean"
            genPatchesFrom "clean"
            genMcpPatches = false
            applyMcpPatches = false
            s2sKeepImports = true
            with common
        }
    }
}

genGradleProjects {
    setJavaLevel "1.8"
    addCompileDep "org.ow2.asm:asm:5.1"
    addCompileDep "net.java.dev.jna:jna:4.2.2"
    addTestCompileDep "junit:junit:4.12"
}

processJson {
    releaseJson = "src/main/jsons/${minecraft.version}-rel.json"
    addReplacements([
        "@minecraft_version@": project.minecraft.version,
        "@version@": project.version,
        "@project@": "nova",
        "@artifact@": "com.continuum.nova:nova-launcher:${project.version}",
        "@universal_jar@": { outputJar.archiveName },
        "@timestamp@": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}

def extraTxts = [
    'LICENSE',
    'readme.md',
    'CONTRIBUTING.md'
]

outputJar {
    destinationDir = file("${project.buildDir}/distributions")
    classifier = 'universal'
    from extraTxts

    manifest.attributes([
        "Implementation-Title": "Nova Renderer",
        "Implementation-Version": project.version,
        "Main-Class": "net.minecraft.launchwrapper.Launch",
        "TweakClass": "com.continuum.nova.launcher.NovaTweaker",
        "Class-Path": getServerClasspath(file("src/main/jsons/${minecraft.version}-rel.json"))
    ])
}

installer {
    destinationDir = file("${project.buildDir}/distributions")
    classifier = 'installer'
    from extraTxts
    from "src/main/resources/nova_logo.png"
    rename "nova_logo\\.png", "big_logo.png"
}

// HELPER METHODS

import groovy.json.JsonSlurper;

String getServerClasspath(File file)
{
    def node = new JsonSlurper().parse(file);
    def out = new StringBuilder()
    node.versionInfo.libraries.each { lib ->
        if (lib.serverreq)
        {
            // group : artifact : version
            def split = lib.name.split(':')
            def group = split[0].replace('.', '/')
            def artifact = split[1]
            def version = split[2]
            out += "libraries/$group/$artifact/$version/$artifact-${version}.jar "
        }
    }
    out += "minecraft_server.${minecraft.version}.jar"

    return out.toString();
}
